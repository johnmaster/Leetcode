"""
哈希表中键的设计：
有时在使用哈希表的时候需要设计合适的键。
示例，我们来看一个例子：
给定一组字符串，将字母异位词组合在一起。
众所周知，哈希映射可以很好的按键分组信息。但是我们不能直接使用
原始字符串作为键，我们必须设计一个合适的键来呈现字母异位词的类
型。例如，有字符串"eat"和"ate"应该在同一组。但是"eat"和"act"
不应该组合在一起。
解决方案：
实际上，设计关键是在原始信息和哈希映射使用的实际键之间建立映射
关系。设计键时，需要保证：
           1.属于同一组的所有值都将映射到同一组中。
           2.需要分成不同组的值不会映射到同一组中。
此过程类似于设计哈希函数，但这是一个本质区别。哈希函数满足第一
个规则但可能不满足第二个规则。
在上面的示例中，我们的映射策略可以是：对字符串进行排序并使用排
序后的字符串作为键。也就是说"eat"和"ate"都将映射到"aet"。

设计键-总结：
1.当字符串/数组中每个元素的顺序不重要时，可以使用排序后的字符串
/数组作为键
2.如果只关心每个值的偏移量，通常是第一个值得偏移量，则可以使用
偏移量作为键
3.在树中，有时会希望直接使用TreeNode作为键。但在大多数情况下，
采用子树的序列化表述可能是一个更好的主意
4.在矩阵中，你可能希望使用行索引和列索引作为键
5.在数独中，可以将行索引和列索引组合来标识此元素属于哪个块
6.有时，在矩阵中，可能希望将值聚合在同一对角线中

执行用时 :116 ms, 在所有 python3 提交中击败了86.62%的用户
内存消耗 :16.4 MB, 在所有 python3 提交中击败了29.85%的用户
"""


class Solution:
    def groupAnagrams(self, strs):
        hash = {}
        for c1 in strs:
            if tuple(sorted(c1)) not in hash:
                hash[tuple(sorted(c1))] = [c1]
            else:
                hash[tuple(sorted(c1))].append(c1)
        return hash.values()